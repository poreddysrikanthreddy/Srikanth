// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7tTSNWitJe6Z5iHR4V1pK
// Component: VCRwiFQQT3kZIW
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: dL_lNqsZGs1RE/component
import { CategoryCollection } from "@plasmicpkgs/commerce"; // plasmic-import: ny07p45F84c_/codeComponent
import NavItem from "../../NavItem"; // plasmic-import: kWW6GXi5zq2eL/component
import { CategoryLink } from "@plasmicpkgs/commerce"; // plasmic-import: fA0CIfqZOwRH/codeComponent
import { CategoryField } from "@plasmicpkgs/commerce"; // plasmic-import: hzqiq--xdG5T/codeComponent
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: MaGsVk4ByJFhZ/component
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import Footer from "../../Footer"; // plasmic-import: LnTbL5unuMe-CO/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_vercel_commerce_theme.module.css"; // plasmic-import: q7tTSNWitJe6Z5iHR4V1pK/projectcss
import sty from "./PlasmicSearch.module.css"; // plasmic-import: VCRwiFQQT3kZIW/css

export const PlasmicSearch__VariantProps = new Array();

export const PlasmicSearch__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSearch__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__apDMg)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gRaCi)}
                >
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4___4PJjc
                    )}
                  >
                    {"All Categories"}
                  </h4>
                  <CategoryCollection
                    data-plasmic-name={"categoryCollection"}
                    data-plasmic-override={overrides.categoryCollection}
                    className={classNames(
                      "__wab_instance",
                      sty.categoryCollection
                    )}
                    emptyMessage={
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dfhmc
                            )}
                          >
                            {"No collection found!"}
                          </div>
                        )}
                      </ph.DataCtxReader>
                    }
                    loadingMessage={
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6IiB
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </ph.DataCtxReader>
                    }
                  >
                    <ph.DataCtxReader>
                      {$ctx => (
                        <NavItem
                          className={classNames(
                            "__wab_instance",
                            sty.navItem__ebdyO
                          )}
                        >
                          <CategoryLink
                            data-plasmic-name={"categoryLink"}
                            data-plasmic-override={overrides.categoryLink}
                            className={classNames(
                              "__wab_instance",
                              sty.categoryLink
                            )}
                            linkDest={"/search"}
                          >
                            <CategoryField
                              data-plasmic-name={"categoryField"}
                              data-plasmic-override={overrides.categoryField}
                              className={classNames(
                                "__wab_instance",
                                sty.categoryField
                              )}
                              field={"name"}
                            />
                          </CategoryLink>
                        </NavItem>
                      )}
                    </ph.DataCtxReader>
                  </CategoryCollection>
                </p.Stack>
              ) : null}
            </p.Stack>
            <div className={classNames(projectcss.all, sty.column__tPWs6)}>
              <ProductCollection
                data-plasmic-name={"productCollection"}
                data-plasmic-override={overrides.productCollection}
                className={classNames("__wab_instance", sty.productCollection)}
                emptyMessage={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4RD0G
                        )}
                      >
                        {"No product found!"}
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
                loadingMessage={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__voEwa
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
                sort={"price-asc"}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <ProductCard
                      data-plasmic-name={"productCard"}
                      data-plasmic-override={overrides.productCard}
                      className={classNames("__wab_instance", sty.productCard)}
                      color={"violet"}
                    >
                      <ProductTextField
                        data-plasmic-name={"productTextField"}
                        data-plasmic-override={overrides.productTextField}
                        className={classNames(
                          "__wab_instance",
                          sty.productTextField
                        )}
                        field={"name"}
                      />
                    </ProductCard>
                  )}
                </ph.DataCtxReader>
              </ProductCollection>
            </div>
            <div className={classNames(projectcss.all, sty.column__tifa9)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jGykJ)}
                >
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__hnQtO
                    )}
                  >
                    {"Relevance"}
                  </h4>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__k5FF)}
                  >
                    <NavItem
                      className={classNames(
                        "__wab_instance",
                        sty.navItem__kVCwH
                      )}
                      queryParam={"sort=trending-desc"}
                    >
                      {"Trending"}
                    </NavItem>
                    <NavItem
                      className={classNames(
                        "__wab_instance",
                        sty.navItem__palSx
                      )}
                      queryParam={"sort=latest-desc"}
                    >
                      {"Latest Arrivals"}
                    </NavItem>
                    <NavItem
                      className={classNames(
                        "__wab_instance",
                        sty.navItem__a2NNx
                      )}
                      isActive={true}
                      queryParam={"sort=price-asc"}
                    >
                      {"Price: Low to High"}
                    </NavItem>
                    <NavItem
                      className={classNames(
                        "__wab_instance",
                        sty.navItem__m9XgG
                      )}
                      queryParam={"sort=price-desc"}
                    >
                      {"Price: High to Low"}
                    </NavItem>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "columns",
    "categoryCollection",
    "categoryLink",
    "categoryField",
    "productCollection",
    "productCard",
    "productTextField",
    "footer"
  ],

  navbar: ["navbar"],
  columns: [
    "columns",
    "categoryCollection",
    "categoryLink",
    "categoryField",
    "productCollection",
    "productCard",
    "productTextField"
  ],

  categoryCollection: ["categoryCollection", "categoryLink", "categoryField"],
  categoryLink: ["categoryLink", "categoryField"],
  categoryField: ["categoryField"],
  productCollection: ["productCollection", "productCard", "productTextField"],
  productCard: ["productCard", "productTextField"],
  productTextField: ["productTextField"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSearch__ArgProps,
          internalVariantPropNames: PlasmicSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearch";
  } else {
    func.displayName = `PlasmicSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicSearch = Object.assign(
  // Top-level PlasmicSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    columns: makeNodeComponent("columns"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    categoryLink: makeNodeComponent("categoryLink"),
    categoryField: makeNodeComponent("categoryField"),
    productCollection: makeNodeComponent("productCollection"),
    productCard: makeNodeComponent("productCard"),
    productTextField: makeNodeComponent("productTextField"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicSearch
    internalVariantProps: PlasmicSearch__VariantProps,
    internalArgProps: PlasmicSearch__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSearch;
/* prettier-ignore-end */
