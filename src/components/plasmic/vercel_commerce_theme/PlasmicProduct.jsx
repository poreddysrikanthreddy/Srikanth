// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7tTSNWitJe6Z5iHR4V1pK
// Component: _MiPG3cnD2SvbG
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: dL_lNqsZGs1RE/component
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent
import { ProductSlider } from "@plasmicpkgs/commerce"; // plasmic-import: 5k_ZYl4EkcYi/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductVariantPicker } from "@plasmicpkgs/commerce"; // plasmic-import: i3vHZr7erKX/codeComponent
import { AddToCartButton } from "@plasmicpkgs/commerce"; // plasmic-import: NR7KYUJmEqx/codeComponent
import Button from "../../Button"; // plasmic-import: gV4dpx9Bvf5pu3/component
import Collapse from "../../Collapse"; // plasmic-import: h3jf89-O0Y-Qq7/component
import Footer from "../../Footer"; // plasmic-import: LnTbL5unuMe-CO/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_vercel_commerce_theme.module.css"; // plasmic-import: q7tTSNWitJe6Z5iHR4V1pK/projectcss
import sty from "./PlasmicProduct.module.css"; // plasmic-import: _MiPG3cnD2SvbG/css

export const PlasmicProduct__VariantProps = new Array();

export const PlasmicProduct__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProduct__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <ProductBox
            data-plasmic-name={"productBox"}
            data-plasmic-override={overrides.productBox}
            className={classNames("__wab_instance", sty.productBox)}
            id={"short-sleeve-t-shirt"}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__xAgPz)}
                  >
                    <ProductSlider
                      data-plasmic-name={"productSlider"}
                      data-plasmic-override={overrides.productSlider}
                      className={classNames(
                        "__wab_instance",
                        sty.productSlider
                      )}
                      slideContainer={
                        <ph.DataCtxReader>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dx6N7
                              )}
                            >
                              <ProductMedia
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMedia__nppsR
                                )}
                              />
                            </div>
                          )}
                        </ph.DataCtxReader>
                      }
                      slideSelected={0}
                      thumbsContainer={
                        <ph.DataCtxReader>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__osCh
                              )}
                            >
                              <ProductMedia
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMedia__ogBg1
                                )}
                              />
                            </div>
                          )}
                        </ph.DataCtxReader>
                      }
                      thumbsVisible={4}
                    />
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__rzilo)}
                  >
                    {true ? (
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          sty.h3
                        )}
                      >
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__gyrKa
                          )}
                          field={"name"}
                        />
                      </h3>
                    ) : null}
                    <ProductTextField
                      className={classNames(
                        "__wab_instance",
                        sty.productTextField__jmzOj
                      )}
                      field={"description"}
                    />

                    <ProductVariantPicker
                      data-plasmic-name={"productVariantPicker"}
                      data-plasmic-override={overrides.productVariantPicker}
                      className={classNames(
                        "__wab_instance",
                        sty.productVariantPicker
                      )}
                    />

                    <AddToCartButton
                      data-plasmic-name={"addToCartButton"}
                      data-plasmic-override={overrides.addToCartButton}
                      className={classNames(
                        "__wab_instance",
                        sty.addToCartButton
                      )}
                    >
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        color={"white"}
                      >
                        {"ADD TO CART"}
                      </Button>
                    </AddToCartButton>
                    <Collapse
                      className={classNames(
                        "__wab_instance",
                        sty.collapse__pcyg
                      )}
                      content={
                        "This is a limited edition production run. Printing starts when the drop ends."
                      }
                      title={"Care"}
                    />

                    <Collapse
                      className={classNames(
                        "__wab_instance",
                        sty.collapse__wcSem
                      )}
                      content={
                        "This is a limited edition production run. Printing starts when the drop ends. Reminder: Bad Boys For Life. Shipping may take 10+ days due to COVID-19."
                      }
                      title={"Details"}
                    />
                  </p.Stack>
                </div>
              )}
            </ph.DataCtxReader>
          </ProductBox>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "productBox",
    "columns",
    "productSlider",
    "h3",
    "productVariantPicker",
    "addToCartButton",
    "button",
    "footer"
  ],

  navbar: ["navbar"],
  productBox: [
    "productBox",
    "columns",
    "productSlider",
    "h3",
    "productVariantPicker",
    "addToCartButton",
    "button"
  ],

  columns: [
    "columns",
    "productSlider",
    "h3",
    "productVariantPicker",
    "addToCartButton",
    "button"
  ],

  productSlider: ["productSlider"],
  h3: ["h3"],
  productVariantPicker: ["productVariantPicker"],
  addToCartButton: ["addToCartButton", "button"],
  button: ["button"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProduct__ArgProps,
          internalVariantPropNames: PlasmicProduct__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProduct__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProduct";
  } else {
    func.displayName = `PlasmicProduct.${nodeName}`;
  }
  return func;
}

export const PlasmicProduct = Object.assign(
  // Top-level PlasmicProduct renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    productBox: makeNodeComponent("productBox"),
    columns: makeNodeComponent("columns"),
    productSlider: makeNodeComponent("productSlider"),
    h3: makeNodeComponent("h3"),
    productVariantPicker: makeNodeComponent("productVariantPicker"),
    addToCartButton: makeNodeComponent("addToCartButton"),
    button: makeNodeComponent("button"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicProduct
    internalVariantProps: PlasmicProduct__VariantProps,
    internalArgProps: PlasmicProduct__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProduct;
/* prettier-ignore-end */
