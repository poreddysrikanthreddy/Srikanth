// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7tTSNWitJe6Z5iHR4V1pK
// Component: MaGsVk4ByJFhZ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { ProductLink } from "@plasmicpkgs/commerce"; // plasmic-import: t362fgW6eiCe/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_vercel_commerce_theme.module.css"; // plasmic-import: q7tTSNWitJe6Z5iHR4V1pK/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: MaGsVk4ByJFhZ/css
import WishlistIcon from "./icons/PlasmicIcon__Wishlist"; // plasmic-import: pwoJq1BfeyNGzs/icon

export const PlasmicProductCard__VariantProps = new Array(
  "color",
  "shape",
  "hideWishlist",
  "imageUrl",
  "hidePrice"
);

export const PlasmicProductCard__ArgProps = new Array("imageIndex", "children");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProductCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          imageIndex: undefined
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "shape",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shape
      },
      {
        path: "hideWishlist",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideWishlist
      },
      {
        path: "imageUrl",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.imageUrl
      },
      {
        path: "hidePrice",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hidePrice
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        "cover-container",
        {
          [sty.rootcolor_black]: hasVariant($state, "color", "black"),
          [sty.rootcolor_pink]: hasVariant($state, "color", "pink"),
          [sty.rootcolor_violet]: hasVariant($state, "color", "violet"),
          [sty.rootcolor_white]: hasVariant($state, "color", "white"),
          [sty.rootimageUrl]: hasVariant($state, "imageUrl", "imageUrl"),
          [sty.rootshape_slim]: hasVariant($state, "shape", "slim")
        }
      )}
    >
      <ProductLink
        data-plasmic-name={"productLink"}
        data-plasmic-override={overrides.productLink}
        className={classNames("__wab_instance", sty.productLink)}
        linkDest={"/product"}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox___5J3I, {
            [sty.freeBoxcolor_violet___5J3I9Kq60]: hasVariant(
              $state,
              "color",
              "violet"
            ),
            [sty.freeBoxhideWishlist___5J3IAkHaj]: hasVariant(
              $state,
              "hideWishlist",
              "hideWishlist"
            ),
            [sty.freeBoximageUrl___5J3Ipt7P]: hasVariant(
              $state,
              "imageUrl",
              "imageUrl"
            ),
            [sty.freeBoxshape_slim___5J3I5OtvQ]: hasVariant(
              $state,
              "shape",
              "slim"
            )
          })}
        >
          {(hasVariant($state, "shape", "slim") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___0TktJ, {
                [sty.freeBoxhideWishlist___0TktJAkHaj]: hasVariant(
                  $state,
                  "hideWishlist",
                  "hideWishlist"
                ),
                [sty.freeBoximageUrl___0TktJpt7P]: hasVariant(
                  $state,
                  "imageUrl",
                  "imageUrl"
                ),
                [sty.freeBoxshape_slim___0TktJ5OtvQ]: hasVariant(
                  $state,
                  "shape",
                  "slim"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__epXni, {
                  [sty.freeBoxcolor_white__epXni4Cyfc]: hasVariant(
                    $state,
                    "color",
                    "white"
                  ),
                  [sty.freeBoxhideWishlist__epXniAkHaj]: hasVariant(
                    $state,
                    "hideWishlist",
                    "hideWishlist"
                  ),
                  [sty.freeBoximageUrl__epXniPt7P]: hasVariant(
                    $state,
                    "imageUrl",
                    "imageUrl"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__tzXM, {
                    [sty.freeBoxhideWishlist__tzXMAkHaj]: hasVariant(
                      $state,
                      "hideWishlist",
                      "hideWishlist"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nb0Ap)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__cwepZ
                          )}
                          field={"name"}
                        />
                      ),

                      value: args.children
                    })}
                  </div>
                  {(
                    hasVariant($state, "hideWishlist", "hideWishlist")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xdpP, {
                        [sty.freeBoxhideWishlist__xdpPAkHaj]: hasVariant(
                          $state,
                          "hideWishlist",
                          "hideWishlist"
                        )
                      })}
                    >
                      <WishlistIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg, {
                          [sty.svgcolor_white]: hasVariant(
                            $state,
                            "color",
                            "white"
                          )
                        })}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__sSzyF)}>
                  {(
                    hasVariant($state, "hidePrice", "hidePrice") ? true : true
                  ) ? (
                    <ProductPriceComponent
                      data-plasmic-name={"productPrice"}
                      data-plasmic-override={overrides.productPrice}
                      className={classNames(
                        "__wab_instance",
                        sty.productPrice,
                        {
                          [sty.productPricecolor_white]: hasVariant(
                            $state,
                            "color",
                            "white"
                          ),
                          [sty.productPricehidePrice]: hasVariant(
                            $state,
                            "hidePrice",
                            "hidePrice"
                          )
                        }
                      )}
                    />
                  ) : null}
                </div>
              </p.Stack>
              <div
                className={classNames(projectcss.all, sty.freeBox__zHvZ, {
                  [sty.freeBoximageUrl__zHvZpt7P]: hasVariant(
                    $state,
                    "imageUrl",
                    "imageUrl"
                  ),
                  [sty.freeBoxshape_slim__zHvZ5OtvQ]: hasVariant(
                    $state,
                    "shape",
                    "slim"
                  )
                })}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qLz1G, {
                      [sty.freeBoximageUrl__qLz1Gpt7P]: hasVariant(
                        $state,
                        "imageUrl",
                        "imageUrl"
                      )
                    })}
                  >
                    {(
                      hasVariant($state, "imageUrl", "imageUrl") ? true : true
                    ) ? (
                      <ProductMedia
                        className={classNames(
                          "__wab_instance",
                          sty.productMedia__z88Tn,
                          {
                            [sty.productMediacolor_black__z88TnAprjh]:
                              hasVariant($state, "color", "black"),
                            [sty.productMediacolor_pink__z88TnbV9C]: hasVariant(
                              $state,
                              "color",
                              "pink"
                            ),
                            [sty.productMediacolor_violet__z88Tn9Kq60]:
                              hasVariant($state, "color", "violet"),
                            [sty.productMediacolor_white__z88Tn4Cyfc]:
                              hasVariant($state, "color", "white"),
                            [sty.productMediahidePrice__z88Tn1OLxD]: hasVariant(
                              $state,
                              "hidePrice",
                              "hidePrice"
                            ),
                            [sty.productMediahideWishlist__z88TnAkHaj]:
                              hasVariant(
                                $state,
                                "hideWishlist",
                                "hideWishlist"
                              ),
                            [sty.productMediaimageUrl__z88TnPt7P]: hasVariant(
                              $state,
                              "imageUrl",
                              "imageUrl"
                            ),
                            [sty.productMediashape_slim__z88Tn5OtvQ]:
                              hasVariant($state, "shape", "slim")
                          }
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant($state, "imageUrl", "imageUrl") ? true : true
                    ) ? (
                      <div
                        data-plasmic-name={"imageContainer"}
                        data-plasmic-override={overrides.imageContainer}
                        className={classNames(
                          projectcss.all,
                          sty.imageContainer,
                          {
                            [sty.imageContainerimageUrl]: hasVariant(
                              $state,
                              "imageUrl",
                              "imageUrl"
                            )
                          }
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
          {(hasVariant($state, "shape", "slim") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__ycVhn, {
                [sty.freeBoxshape_slim__ycVhn5OtvQ]: hasVariant(
                  $state,
                  "shape",
                  "slim"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___924VI, {
                  [sty.freeBoxshape_slim___924VI5OtvQ]: hasVariant(
                    $state,
                    "shape",
                    "slim"
                  )
                })}
              >
                <ProductMedia
                  className={classNames(
                    "__wab_instance",
                    sty.productMedia__ssIqR,
                    {
                      [sty.productMediashape_slim__ssIqR5OtvQ]: hasVariant(
                        $state,
                        "shape",
                        "slim"
                      )
                    }
                  )}
                />
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__jsDqB, {
                  [sty.freeBoxshape_slim__jsDqB5OtvQ]: hasVariant(
                    $state,
                    "shape",
                    "slim"
                  ),
                  [sty.freeBoxshape_slim_color_black__jsDqB5OtvQAprjh]:
                    hasVariant($state, "shape", "slim") &&
                    hasVariant($state, "color", "black")
                })}
              >
                <ProductTextField
                  data-plasmic-name={"productTextField"}
                  data-plasmic-override={overrides.productTextField}
                  className={classNames(
                    "__wab_instance",
                    sty.productTextField,
                    {
                      [sty.productTextFieldshape_slim]: hasVariant(
                        $state,
                        "shape",
                        "slim"
                      ),
                      [sty.productTextFieldshape_slim_color_black]:
                        hasVariant($state, "shape", "slim") &&
                        hasVariant($state, "color", "black")
                    }
                  )}
                  field={"name"}
                />
              </div>
            </div>
          ) : null}
        </div>
      </ProductLink>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "productLink",
    "svg",
    "productPrice",
    "imageContainer",
    "productTextField"
  ],

  productLink: [
    "productLink",
    "svg",
    "productPrice",
    "imageContainer",
    "productTextField"
  ],

  svg: ["svg"],
  productPrice: ["productPrice"],
  imageContainer: ["imageContainer"],
  productTextField: ["productTextField"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productLink: makeNodeComponent("productLink"),
    svg: makeNodeComponent("svg"),
    productPrice: makeNodeComponent("productPrice"),
    imageContainer: makeNodeComponent("imageContainer"),
    productTextField: makeNodeComponent("productTextField"),
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
