// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7tTSNWitJe6Z5iHR4V1pK
// Component: dL_lNqsZGs1RE
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { CategoryLink } from "@plasmicpkgs/commerce"; // plasmic-import: fA0CIfqZOwRH/codeComponent
import NavItem from "../../NavItem"; // plasmic-import: kWW6GXi5zq2eL/component
import { CategoryCollection } from "@plasmicpkgs/commerce"; // plasmic-import: ny07p45F84c_/codeComponent
import { CategoryField } from "@plasmicpkgs/commerce"; // plasmic-import: hzqiq--xdG5T/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: tCYev67yUnPei/component
import Cart from "../../Cart"; // plasmic-import: eKi6I8TPrVMENc/component
import { useScreenVariants as useScreenVariantso6F3HL2InS09Fs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o6f3hL2inS09FS/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_vercel_commerce_theme.module.css"; // plasmic-import: q7tTSNWitJe6Z5iHR4V1pK/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: dL_lNqsZGs1RE/css
import LogoIcon from "./icons/PlasmicIcon__Logo"; // plasmic-import: l5ZRQOfO4TwE4O/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: QZ60uLxY9fCxW-/icon
import WishlistIcon from "./icons/PlasmicIcon__Wishlist"; // plasmic-import: pwoJq1BfeyNGzs/icon

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array("query");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["query"]
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso6F3HL2InS09Fs()
  });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__aDgk)}
        >
          <a
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            href={`/`}
          >
            <LogoIcon
              className={classNames(projectcss.all, sty.svg__l33Qa)}
              role={"img"}
            />
          </a>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <CategoryLink
              className={classNames("__wab_instance", sty.categoryLink__uzVDa)}
              linkDest={"/search"}
            >
              <NavItem
                className={classNames("__wab_instance", sty.navItem__zhT4U)}
              >
                {"All"}
              </NavItem>
            </CategoryLink>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
            <CategoryCollection
              data-plasmic-name={"categoryCollection"}
              data-plasmic-override={overrides.categoryCollection}
              className={classNames("__wab_instance", sty.categoryCollection)}
              emptyMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rx6BK
                      )}
                    >
                      {"No collection found!"}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              loadingMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0PFbt
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              noLayout={true}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <NavItem
                    className={classNames("__wab_instance", sty.navItem__z7Jcd)}
                  >
                    <CategoryLink
                      className={classNames(
                        "__wab_instance",
                        sty.categoryLink__uJwXl
                      )}
                      linkDest={"/search"}
                    >
                      <CategoryField
                        data-plasmic-name={"categoryField"}
                        data-plasmic-override={overrides.categoryField}
                        className={classNames(
                          "__wab_instance",
                          sty.categoryField
                        )}
                        field={"name"}
                      />
                    </CategoryLink>
                  </NavItem>
                )}
              </ph.DataCtxReader>
            </CategoryCollection>
          ) : null}
        </p.Stack>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <TextInput
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput}
          className={classNames("__wab_instance", sty.textInput)}
          color={"dark"}
          endIcon={
            <SearchsvgIcon
              className={classNames(projectcss.all, sty.svg__x82HW)}
              role={"img"}
            />
          }
          onChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ["textInput", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          showEndIcon={true}
          value={p.generateStateValueProp($state, ["textInput", "value"])}
        />
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__blgyh)}
        >
          <Cart
            data-plasmic-name={"cart"}
            data-plasmic-override={overrides.cart}
            className={classNames("__wab_instance", sty.cart)}
          />

          <WishlistIcon
            className={classNames(projectcss.all, sty.svg__cFiJb)}
            role={"img"}
          />

          <div className={classNames(projectcss.all, sty.freeBox__gtfQ2)} />
        </p.Stack>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "categoryCollection",
    "categoryField",
    "textInput",
    "cart"
  ],

  link: ["link"],
  categoryCollection: ["categoryCollection", "categoryField"],
  categoryField: ["categoryField"],
  textInput: ["textInput"],
  cart: ["cart"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    categoryField: makeNodeComponent("categoryField"),
    textInput: makeNodeComponent("textInput"),
    cart: makeNodeComponent("cart"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
